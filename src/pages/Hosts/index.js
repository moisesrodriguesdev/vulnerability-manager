import React, { useEffect, useState, useContext } from "react";
import { useHistory } from "react-router-dom";
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
import TableContainer from "@material-ui/core/TableContainer";
import TableHead from "@material-ui/core/TableHead";
import TableRow from "@material-ui/core/TableRow";
import Paper from "@material-ui/core/Paper";
import Pagination from "@material-ui/lab/Pagination";
import Button from "@material-ui/core/Button";
import StoreContextApi from "./../../Components/Store/ContextApi";
import { FiSearch } from "react-icons/fi";
import api from "./../../services/api";
import Navbar from "./../../Components/NavBar";
import "./styles.css";

const Hosts = () => {
  const { token } = useContext(StoreContextApi);
  const [assets, setAssets] = useState([]);
  const [filterAssets, setFilterAssets] = useState();

  const [assetsTotal, setAssetsTotal] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);

  const history = useHistory();

  useEffect(() => {
    async function getAllAssets() {
      const response = await api.get("assets/", {
        headers: {
          Authorization: `Token ${token}`,
        },
        params: {
          vulnerability: filterAssets,
          page_size: 10,
          page: currentPage,
        },
      });

      setAssetsTotal(response.data.count);

      const totalPages = Math.ceil(response.data.count / 10);
      setTotalPages(totalPages);

      setAssets(response.data.results);
    }

    getAllAssets();
  }, [filterAssets, currentPage]);

  return (
    <>
      <Navbar />
      <div className="content">
        <div className="form-group has-search">
          <FiSearch className="form-control-feedback" />
          <input
            type="text"
            name="vulnerability"
            className="input-search"
            placeholder="Filtre por vulnerabilidade"
            value={filterAssets}
            onChange={(e) => setFilterAssets(e.target.value)}
          />
        </div>

        <TableContainer component={Paper}>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell>Nome do Host</TableCell>
                <TableCell align="right">Endereço IP</TableCell>
                <TableCell align="right">Risco</TableCell>
                <TableCell>Qtd. Vulnerabilidades não corrigidas</TableCell>
                <TableCell align="center">Mais detalhes</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {assets.map((assetsItem) => (
                <TableRow key={assetsItem.id}>
                  <TableCell component="th" scope="row">
                    {assetsItem.hostname}
                  </TableCell>
                  <TableCell align="right">{assetsItem.ip_address}</TableCell>
                  <TableCell align="right">{assetsItem.risk}</TableCell>
                  <TableCell align="center">{assetsItem.vuln_count}</TableCell>
                  <TableCell align="center">
                    {" "}
                    <Button
                      size="small"
                      color="primary"
                      variant="contained"
                      onClick={() => history.push(`/hosts/${assetsItem.id}`)}
                    >
                      Acessar
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        <div className="pagination">
          <span>Total de registro: {assetsTotal}</span>
          <Pagination
            page={currentPage}
            count={totalPages}
            onChange={(event, value) => setCurrentPage(value)}
          />
        </div>
      </div>
    </>
  );
};

export default Hosts;
