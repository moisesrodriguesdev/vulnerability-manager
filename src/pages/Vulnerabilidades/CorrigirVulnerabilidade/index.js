import React, { useContext, useState, useEffect } from "react";
import { useHistory } from "react-router-dom";
import StoreContextApi from "./../../../Components/Store/ContextApi";
import NavBar from "./../../../Components/NavBar";
import Button from '@material-ui/core/Button';
import api from "./../../../services/api";
import "./styles.css";

function initialState() {
  return { assets: "", vulnerability: "" };
}

const CorrigirVulnerabilidade = () => {
  const { token } = useContext(StoreContextApi);
  const [assets, setAssets] = useState([]);
  const [vulnerabilidades, setVulnerabilidade] = useState([]);
  const [valuesForm, setValuesForm] = useState(initialState);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  function onChange(e) {
    const { value, name } = e.target;

    setValuesForm({
      ...valuesForm,
      [name]: value,
    });
  }

  useEffect(() => {
    async function getAllAssets() {
      const response = await api.get("assets/", {
        headers: {
          Authorization: `Token ${token}`,
        },
      });

      setAssets(response.data.results);
    }

    getAllAssets();
  }, []);

  useEffect(() => {
    async function getAllVulnerabilities() {
      const response = await api.get("vulnerabilities", {
        headers: {
          Authorization: `Token ${token}`,
        },
      });

      setVulnerabilidade(response.data.results);
    }

    getAllVulnerabilities();
  }, []);


  async function onSubmit(event) {
    setError(null);
    event.preventDefault();
    api
      .patch(
        `vulnerability/${valuesForm.vulnerability}/asset/${valuesForm.assets}/update`,
        null,
        { headers: { Authorization: `Token ${token}` } }
      )
      .then((response) => {
        setSuccess("Vulnerabilidade corrigida com sucesso");
        setValuesForm(initialState);
      })
      .catch((error) => {
        setError("NÃ£o encontrado"); 
      });
    // const response = await CorrigirVulnerabilidadeUpdate(valuesForm);
  }

  return (
    <>
      <NavBar />

      <div className="content">
        <form onSubmit={onSubmit}>
          <div className="form-vuln-update">
            <div className="content-message">
              {success && <div className="message-success">{success}</div>}
              {error && <div className="message-erro">{error}</div>}
            </div>

            <label>Selecione o host</label>
            <select
              name="assets"
              className="form-select"
              onChange={onChange}
              value={valuesForm.assets}
            >
              {assets.map((asset) => (
                <option key={asset.id} value={asset.id}>
                  {asset.hostname} - {asset.ip_address}
                </option>
              ))}
            </select>

            <label>Selecione o vulnerabilidade</label>
            <select
              name="vulnerability"
              className="form-select"
              onChange={onChange}
              value={valuesForm.vulnerability}
            >
              {vulnerabilidades.map((vuln) => (
                <option key={vuln.id} value={vuln.id}>
                  {vuln.title} - {vuln.severity}
                </option>
              ))}
            </select>
          </div>

          <Button type="submit" variant="contained" color="primary">
            Atualizar
          </Button>
        </form>
      </div>
    </>
  );
};

export default CorrigirVulnerabilidade;
