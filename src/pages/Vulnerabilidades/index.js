import React, { useEffect, useState, useContext } from "react";
import { Link } from "react-router-dom";
import api from "./../../services/api";
import { FiSearch } from "react-icons/fi";
import Navbar from "./../../Components/NavBar";
import StoreContextApi from "./../../Components/Store/ContextApi";
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
import TableContainer from "@material-ui/core/TableContainer";
import TableHead from "@material-ui/core/TableHead";
import TableRow from "@material-ui/core/TableRow";
import Paper from "@material-ui/core/Paper";
import Pagination from "@material-ui/lab/Pagination";

const Vulnerabilidade = () => {
  const { token } = useContext(StoreContextApi);
  const [vulnerabilidade, setVulnerabilidade] = useState([]);
  const [severity, setSeverity] = useState();

  const [vulnerabilitiesTotal, setVulnerabilitiesTotal] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    async function getAllVulnerabilities() {
      const response = await api.get("vulnerabilities", {
        headers: {
          Authorization: `Token ${token}`,
        },
        params: {
          severity: severity,
          page_size: 10,
          page: currentPage,
        },
      });
      setVulnerabilitiesTotal(response.data.count);
      const totalPages = Math.ceil(response.data.count / 10);
      setTotalPages(totalPages);

      setVulnerabilidade(response.data.results);
    }

    getAllVulnerabilities();
  }, [severity, currentPage]);
  return (
    <>
      <Navbar />
      <div className="content">
        <div className="form-group has-search">
          <FiSearch className="form-control-feedback" />
          <input
            type="text"
            name="vulnerability"
            className="input-search"
            placeholder="Filtre por severidade"
            value={severity}
            onChange={(e) => setSeverity(e.target.value)}
          />
        </div>
        <TableContainer component={Paper}>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell>Vulnerabilidade</TableCell>
                <TableCell align="right">Severidade</TableCell>
                <TableCell align="right">CVSS</TableCell>
                <TableCell align="right">Data Publicação</TableCell>
                <TableCell>Qtd hosts afetados</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {vulnerabilidade.map((vulnerabilidadeItem) => (
                <TableRow key={vulnerabilidadeItem.id}>
                  <TableCell component="th" scope="row">
                    {vulnerabilidadeItem.title}
                  </TableCell>
                  <TableCell align="right">
                    {vulnerabilidadeItem.severity}
                  </TableCell>
                  <TableCell align="right">
                    {vulnerabilidadeItem.cvss}
                  </TableCell>
                  <TableCell align="right">
                    {vulnerabilidadeItem.publication_date}
                  </TableCell>
                  <TableCell align="center">
                    {vulnerabilidadeItem.asset_count}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        <div className="pagination">
          <span>Total de registro: {vulnerabilitiesTotal}</span>
          <Pagination
            page={currentPage}
            count={totalPages}
            onChange={(event, value) => setCurrentPage(value)}
          />
        </div>
      </div>
    </>
  );
};

export default Vulnerabilidade;
